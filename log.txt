
> start
> node index.js

ensured
[
  '100003.mp4',   '111102.mp4',  '11227809.mp4',
  '1125968.mp4',  '1274057.mp4', '1335851.mp4',
  '14220321.mp4', '1628563.mp4', '1642028.mp4',
  '16956810.mp4', '178325.mp4',  '1783405.mp4',
  '1789945.mp4',  '179123.mp4',  '2003505.mp4',
  '2025282.mp4',  '208105.mp4',  '215718.mp4',
  '231767.mp4',   '2432764.mp4', '244777.mp4',
  '292357.mp4',   '336859.mp4',  '348170.mp4',
  '359494.mp4',   '38987.mp4',   '394809.mp4',
  '40480.mp4',    '4114095.mp4', '417142.mp4',
  '419163.mp4',   '477816.mp4',  '503093.mp4',
  '52704.mp4',    '5767325.mp4', '59895.mp4',
  '61212.mp4',    '630453.mp4',  '6591213.mp4',
  '6841333.mp4',  '7074.mp4',    '75487831.mp4',
  '762011.mp4',   '79923.mp4',   '826782.mp4',
  'assets',       'complete'
]
[
  '82831.html',
  '8318911.html',
  '89228.html',
  '927358.html',
  '9329446.html',
  '950087.html'
]
enter
https://api.stackexchange.com/2.3/questions?pagesize=1&order=desc&min=30&key=pwDNoBGQPWPm*rgcdmFBkw((&sort=votes&site=stackoverflow&filter=withbody&fromdate=1320969600&todate=3912969600
[
  {
    tags: [
      'java',
      'c++',
      'performance',
      'cpu-architecture',
      'branch-prediction'
    ],
    owner: {
      account_id: 31692,
      reputation: 489326,
      user_id: 87234,
      user_type: 'registered',
      accept_rate: 100,
      profile_image: 'https://i.stack.imgur.com/FkjBe.png?s=256&g=1',
      display_name: 'GManNickG',
      link: 'https://stackoverflow.com/users/87234/gmannickg'
    },
    is_answered: true,
    view_count: 1793069,
    protected_date: 1399067470,
    accepted_answer_id: 11227902,
    answer_count: 26,
    score: 26885,
    last_activity_date: 1673325607,
    creation_date: 1340805096,
    last_edit_date: 1665601007,
    question_id: 11227809,
    content_license: 'CC BY-SA 4.0',
    link: 'https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array',
    title: 'Why is processing a sorted array faster than processing an unsorted array?',
    body: '<p>Here is a piece of C++ code that shows some very peculiar behavior.</p>\n' +
      '<p>For some reason, sorting the data (<em>before</em> the timed region) miraculously makes the primary loop almost six times faster:</p>\n' +
      '<pre class="lang-cpp prettyprint-override"><code>#include &lt;algorithm&gt;\n' +
      '#include &lt;ctime&gt;\n' +
      '#include &lt;iostream&gt;\n' +
      '\n' +
      'int main()\n' +
      '{\n' +
      '    // Generate data\n' +
      '    const unsigned arraySize = 32768;\n' +
      '    int data[arraySize];\n' +
      '\n' +
      '    for (unsigned c = 0; c &lt; arraySize; ++c)\n' +
      '        data[c] = std::rand() % 256;\n' +
      '\n' +
      '    // !!! With this, the next loop runs faster.\n' +
      '    std::sort(data, data + arraySize);\n' +
      '\n' +
      '    // Test\n' +
      '    clock_t start = clock();\n' +
      '    long long sum = 0;\n' +
      '    for (unsigned i = 0; i &lt; 100000; ++i)\n' +
      '    {\n' +
      '        for (unsigned c = 0; c &lt; arraySize; ++c)\n' +
      '        {   // Primary loop.\n' +
      '            if (data[c] &gt;= 128)\n' +
      '                sum += data[c];\n' +
      '        }\n' +
      '    }\n' +
      '\n' +
      '    double elapsedTime = static_cast&lt;double&gt;(clock()-start) / CLOCKS_PER_SEC;\n' +
      '\n' +
      "    std::cout &lt;&lt; elapsedTime &lt;&lt; '\\n';\n" +
      "    std::cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; '\\n';\n" +
      '}\n' +
      '</code></pre>\n' +
      '<ul>\n' +
      '<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in 11.54 seconds.</li>\n' +
      '<li>With the sorted data, the code runs in 1.93 seconds.</li>\n' +
      '</ul>\n' +
      "<p>(Sorting itself takes more time than this one pass over the array, so it's not actually worth doing if we needed to calculate this for an unknown array.)</p>\n" +
      '<hr />\n' +
      '<p>Initially, I thought this might be just a language or compiler anomaly, so I tried Java:</p>\n' +
      '<pre class="lang-java prettyprint-override"><code>import java.util.Arrays;\n' +
      'import java.util.Random;\n' +
      '\n' +
      'public class Main\n' +
      '{\n' +
      '    public static void main(String[] args)\n' +
      '    {\n' +
      '        // Generate data\n' +
      '        int arraySize = 32768;\n' +
      '        int data[] = new int[arraySize];\n' +
      '\n' +
      '        Random rnd = new Random(0);\n' +
      '        for (int c = 0; c &lt; arraySize; ++c)\n' +
      '            data[c] = rnd.nextInt() % 256;\n' +
      '\n' +
      '        // !!! With this, the next loop runs faster\n' +
      '        Arrays.sort(data);\n' +
      '\n' +
      '        // Test\n' +
      '        long start = System.nanoTime();\n' +
      '        long sum = 0;\n' +
      '        for (int i = 0; i &lt; 100000; ++i)\n' +
      '        {\n' +
      '            for (int c = 0; c &lt; arraySize; ++c)\n' +
      '            {   // Primary loop.\n' +
      '                if (data[c] &gt;= 128)\n' +
      '                    sum += data[c];\n' +
      '            }\n' +
      '        }\n' +
      '\n' +
      '        System.out.println((System.nanoTime() - start) / 1000000000.0);\n' +
      '        System.out.println(&quot;sum = &quot; + sum);\n' +
      '    }\n' +
      '}\n' +
      '</code></pre>\n' +
      '<p>With a similar but less extreme result.</p>\n' +
      '<hr />\n' +
      `<p>My first thought was that sorting brings the data into the <a href="https://en.wikipedia.org/wiki/CPU_cache" rel="noreferrer">cache</a>, but that's silly because the array was just generated.</p>\n` +
      '<ul>\n' +
      '<li>What is going on?</li>\n' +
      '<li>Why is processing a sorted array faster than processing an unsorted array?</li>\n' +
      '</ul>\n' +
      '<p>The code is summing up some independent terms, so the order should not matter.</p>\n' +
      '<hr />\n' +
      '<p><strong>Related / follow-up Q&amp;As</strong> about the same effect with different/later compilers and options:</p>\n' +
      '<ul>\n' +
      '<li><a href="https://stackoverflow.com/q/66521344">Why is processing an unsorted array the same speed as processing a sorted array with modern x86-64 clang?</a></li>\n' +
      '<li><a href="https://stackoverflow.com/q/28875325">gcc optimization flag -O3 makes code slower than -O2</a></li>\n' +
      '</ul>\n'
  }
]
[ 82831, 8318911, 89228, 927358, 9329446, 950087 ]
82831
<!DOCTYPE html><html lang="en"><head><style>@import url("https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200;1,200;1,300&family=Work+Sans:wght@400;500&display=swap");</style><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta http-equiv="X-UA-Compatible" content="ie=edge"><head><link href="../../src/css/general.css" rel="stylesheet" /></head><p class='question-hyperlink'>Why is processing a sorted array faster than processing an unsorted array?</p><div class="s-prose js-post-body"><p>Here is a piece of C++ code that shows some very peculiar behavior.</p>
<p>For some reason, sorting the data (<em>before</em> the timed region) miraculously makes the primary loop almost six times faster:</p>
<pre class="lang-cpp prettyprint-override"><code>#include &lt;algorithm&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;

int main()
{
    // Generate data
    const unsigned arraySize = 32768;
    int data[arraySize];

    for (unsigned c = 0; c &lt; arraySize; ++c)
        data[c] = std::rand() % 256;

    // !!! With this, the next loop runs faster.
    std::sort(data, data + arraySize);

    // Test
    clock_t start = clock();
    long long sum = 0;
    for (unsigned i = 0; i &lt; 100000; ++i)
    {
        for (unsigned c = 0; c &lt; arraySize; ++c)
        {   // Primary loop.
            if (data[c] &gt;= 128)
                sum += data[c];
        }
    }

    double elapsedTime = static_cast&lt;double&gt;(clock()-start) / CLOCKS_PER_SEC;

    std::cout &lt;&lt; elapsedTime &lt;&lt; '\n';
    std::cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; '\n';
}
</code></pre>
<ul>
<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in 11.54 seconds.</li>
<li>With the sorted data, the code runs in 1.93 seconds.</li>
</ul>
<p>(Sorting itself takes more time than this one pass over the array, so it's not actually worth doing if we needed to calculate this for an unknown array.)</p>
<hr />
<p>Initially, I thought this might be just a language or compiler anomaly, so I tried Java:</p>
<pre class="lang-java prettyprint-override"><code>import java.util.Arrays;
import java.util.Random;

public class Main
{
    public static void main(String[] args)
    {
        // Generate data
        int arraySize = 32768;
        int data[] = new int[arraySize];

        Random rnd = new Random(0);
        for (int c = 0; c &lt; arraySize; ++c)
            data[c] = rnd.nextInt() % 256;

        // !!! With this, the next loop runs faster
        Arrays.sort(data);

        // Test
        long start = System.nanoTime();
        long sum = 0;
        for (int i = 0; i &lt; 100000; ++i)
        {
            for (int c = 0; c &lt; arraySize; ++c)
            {   // Primary loop.
                if (data[c] &gt;= 128)
                    sum += data[c];
            }
        }

        System.out.println((System.nanoTime() - start) / 1000000000.0);
        System.out.println(&quot;sum = &quot; + sum);
    }
}
</code></pre>
<p>With a similar but less extreme result.</p>
<hr />
<p>My first thought was that sorting brings the data into the <a href="https://en.wikipedia.org/wiki/CPU_cache" rel="noreferrer">cache</a>, but that's silly because the array was just generated.</p>
<ul>
<li>What is going on?</li>
<li>Why is processing a sorted array faster than processing an unsorted array?</li>
</ul>
<p>The code is summing up some independent terms, so the order should not matter.</p>
<hr />
<p><strong>Related / follow-up Q&amp;As</strong> about the same effect with different/later compilers and options:</p>
<ul>
<li><a href="https://stackoverflow.com/q/66521344">Why is processing an unsorted array the same speed as processing a sorted array with modern x86-64 clang?</a></li>
<li><a href="https://stackoverflow.com/q/28875325">gcc optimization flag -O3 makes code slower than -O2</a></li>
</ul>
</div><p class="this-has-helped">This answer has helped 34561 people.</p><div class="s-prose js-post-body"><p><strong>You are a victim of <a href="https://en.wikipedia.org/wiki/Branch_predictor" rel="noreferrer">branch prediction</a> fail.</strong></p>
<hr />
<h2>What is Branch Prediction?</h2>
<p>Consider a railroad junction:</p>
<p><a href="https://commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG" rel="noreferrer"><img src="https://i.stack.imgur.com/muxnt.jpg" alt="Image showing a railroad junction" /></a>
<sub><a href="https://commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG" rel="noreferrer">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en" rel="noreferrer">CC-By-SA 3.0</a> license.</sub></p>
<p>Now for the sake of argument, suppose this is back in the 1800s - before long-distance or radio communication.</p>
<p>You are a blind operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.</p>
<p><em>Trains are heavy and have a lot of inertia, so they take forever to start up and slow down.</em></p>
<p>Is there a better way? You guess which direction the train will go!</p>
<ul>
<li>If you guessed right, it continues on.</li>
<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>
</ul>
<p><strong>If you guess right every time</strong>, the train will never have to stop.<br />
<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>
<hr />
<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>
<p><img src="https://i.stack.imgur.com/pyfwC.png" alt="Screenshot of compiled code containing an if statement" /></p>
<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>
<p><em>Modern processors are complicated and have long pipelines. This means they take forever to &quot;warm up&quot; and &quot;slow down&quot;.</em></p>
<p>Is there a better way? You guess which direction the branch will go!</p>
<ul>
<li>If you guessed right, you continue executing.</li>
<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>
</ul>
<p><strong>If you guess right every time</strong>, the execution will never have to stop.<br />
<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>
<hr />
<p>This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.</p>
<p>How would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every three times, you guess the same...</p>
<p><em><strong>In other words, you try to identify a pattern and follow it.</strong></em> This is more or less how branch predictors work.</p>
<p>Most applications have well-behaved branches. Therefore, modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>
<p>Further reading: <a href="https://en.wikipedia.org/wiki/Branch_predictor" rel="noreferrer">&quot;Branch predictor&quot; article on Wikipedia</a>.</p>
<hr />
<h2>As hinted from above, the culprit is this if-statement:</h2>
<pre><code>if (data[c] &gt;= 128)
    sum += data[c];
</code></pre>
<p>Notice that the data is evenly distributed between 0 and 255. When the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>
<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times. Even a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>
<p><strong>Quick visualization:</strong></p>
<pre class="lang-none prettyprint-override"><code>T = branch taken
N = branch not taken

data[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...
branch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...

       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)
</code></pre>
<p>However, when the data is completely random, the branch predictor is rendered useless, because it can't predict random data. Thus there will probably be around 50% misprediction (no better than random guessing).</p>
<pre class="lang-none prettyprint-override"><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, ...
branch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T  ...

       = TTNTTTTNTNNTTT ...   (completely random - impossible to predict)
</code></pre>
<hr />
<p><strong>What can be done?</strong></p>
<p>If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>
<p>Replace:</p>
<pre><code>if (data[c] &gt;= 128)
    sum += data[c];
</code></pre>
<p>with:</p>
<pre><code>int t = (data[c] - 128) &gt;&gt; 31;
sum += ~t &amp; data[c];
</code></pre>
<p>This eliminates the branch and replaces it with some bitwise operations.</p>
<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of <code>data[]</code>.)</sub></p>
<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>
<p>C++ - Visual Studio 2010 - x64 Release</p>
<div class="s-table-container">
<table class="s-table">
<thead>
<tr>
<th>Scenario</th>
<th>Time (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Branching - Random data</td>
<td>11.777</td>
</tr>
<tr>
<td>Branching - Sorted data</td>
<td>2.352</td>
</tr>
<tr>
<td>Branchless - Random data</td>
<td>2.564</td>
</tr>
<tr>
<td>Branchless - Sorted data</td>
<td>2.587</td>
</tr>
</tbody>
</table>
</div>
<p>Java - NetBeans 7.1.1 JDK 7 - x64</p>
<div class="s-table-container">
<table class="s-table">
<thead>
<tr>
<th>Scenario</th>
<th>Time (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Branching - Random data</td>
<td>10.93293813</td>
</tr>
<tr>
<td>Branching - Sorted data</td>
<td>5.643797077</td>
</tr>
<tr>
<td>Branchless - Random data</td>
<td>3.113581453</td>
</tr>
<tr>
<td>Branchless - Sorted data</td>
<td>3.186068823</td>
</tr>
</tbody>
</table>
</div>
<p>Observations:</p>
<ul>
<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>
<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>
<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>
</ul>
<p>A general rule of thumb is to avoid data-dependent branching in critical loops (such as in this example).</p>
<hr />
<p><strong>Update:</strong></p>
<ul>
<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move, so there is no difference between the sorted and unsorted data - both are fast.</p>
<p>(Or somewhat fast: for the already-sorted case, <code>cmov</code> can be slower especially if GCC puts it on the critical path instead of just <code>add</code>, especially on Intel before Broadwell where <code>cmov</code> has 2 cycle latency: <a href="https://stackoverflow.com/questions/28875325/gcc-optimization-flag-o3-makes-code-slower-than-o2">gcc optimization flag -O3 makes code slower than -O2</a>)</p>
</li>
<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Intel_C++_Compiler" rel="noreferrer">Intel C++ Compiler</a> (ICC) 11 does something miraculous. It <a href="https://en.wikipedia.org/wiki/Loop_interchange" rel="noreferrer">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. Not only is it immune to the mispredictions, it's also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p>
</li>
<li><p>If you give the Intel compiler the branchless code, it just outright vectorizes it... and is just as fast as with the branch (with the loop interchange).</p>
</li>
</ul>
<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>
</div><p class="this-has-helped">This answer has helped 4599 people.</p><div class="s-prose js-post-body"><p><strong>Branch prediction.</strong></p>
<p>With a sorted array, the condition <code>data[c] &gt;= 128</code> is first <code>false</code> for a streak of values, then becomes <code>true</code> for all later values. That's easy to predict. With an unsorted array, you pay for the branching cost.</p>
</div><p class="this-has-helped">This answer has helped 3750 people.</p><div class="s-prose js-post-body"><p>The reason why performance improves drastically when the data is sorted is that the branch prediction penalty is removed, as explained beautifully in <a href="//stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array/11227902#11227902">Mysticial's answer</a>.</p>
<p>Now, if we look at the code</p>
<pre><code>if (data[c] &gt;= 128)
    sum += data[c];
</code></pre>
<p>we can find that the meaning of this particular <code>if... else...</code> branch is to add something when a condition is satisfied. This type of branch can be easily transformed into a <strong>conditional move</strong> statement, which would be compiled into a conditional move instruction: <code>cmovl</code>, in an <code>x86</code> system. The branch and thus the potential branch prediction penalty is removed.</p>
<p>In <code>C</code>, thus <code>C++</code>, the statement, which would compile directly (without any optimization) into the conditional move instruction in <code>x86</code>, is the ternary operator <code>... ? ... : ...</code>. So we rewrite the above statement into an equivalent one:</p>
<pre><code>sum += data[c] &gt;=128 ? data[c] : 0;
</code></pre>
<p>While maintaining readability, we can check the speedup factor.</p>
<p>On an Intel <a href="//en.wikipedia.org/wiki/Intel_Core#Core_i7" rel="noreferrer">Core i7</a>-2600K @ 3.4 GHz and Visual Studio 2010 Release Mode, the benchmark is:</p>
<p><strong>x86</strong></p>
<div class="s-table-container">
<table class="s-table">
<thead>
<tr>
<th>Scenario</th>
<th>Time (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Branching - Random data</td>
<td>8.885</td>
</tr>
<tr>
<td>Branching - Sorted data</td>
<td>1.528</td>
</tr>
<tr>
<td>Branchless - Random data</td>
<td>3.716</td>
</tr>
<tr>
<td>Branchless - Sorted data</td>
<td>3.71</td>
</tr>
</tbody>
</table>
</div>
<p><strong>x64</strong></p>
<div class="s-table-container">
<table class="s-table">
<thead>
<tr>
<th>Scenario</th>
<th>Time (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Branching - Random data</td>
<td>11.302</td>
</tr>
<tr>
<td>Branching - Sorted data</td>
<td>1.830</td>
</tr>
<tr>
<td>Branchless - Random data</td>
<td>2.736</td>
</tr>
<tr>
<td>Branchless - Sorted data</td>
<td>2.737</td>
</tr>
</tbody>
</table>
</div>
<p>The result is robust in multiple tests. We get a great speedup when the branch result is unpredictable, but we suffer a little bit when it is predictable. In fact, when using a conditional move, the performance is the same regardless of the data pattern.</p>
<p>Now let's look more closely by investigating the <code>x86</code> assembly they generate. For simplicity, we use two functions <code>max1</code> and <code>max2</code>.</p>
<p><code>max1</code> uses the conditional branch <code>if... else ...</code>:</p>
<pre><code>int max1(int a, int b) {
    if (a &gt; b)
        return a;
    else
        return b;
}
</code></pre>
<p><code>max2</code> uses the ternary operator <code>... ? ... : ...</code>:</p>
<pre><code>int max2(int a, int b) {
    return a &gt; b ? a : b;
}
</code></pre>
<p>On an x86-64 machine, <code>GCC -S</code> generates the assembly below.</p>
<pre><code>:max1
    movl    %edi, -4(%rbp)
    movl    %esi, -8(%rbp)
    movl    -4(%rbp), %eax
    cmpl    -8(%rbp), %eax
    jle     .L2
    movl    -4(%rbp), %eax
    movl    %eax, -12(%rbp)
    jmp     .L4
.L2:
    movl    -8(%rbp), %eax
    movl    %eax, -12(%rbp)
.L4:
    movl    -12(%rbp), %eax
    leave
    ret

:max2
    movl    %edi, -4(%rbp)
    movl    %esi, -8(%rbp)
    movl    -4(%rbp), %eax
    cmpl    %eax, -8(%rbp)
    cmovge  -8(%rbp), %eax
    leave
    ret
</code></pre>
<p><code>max2</code> uses much less code due to the usage of instruction <code>cmovge</code>. But the real gain is that <code>max2</code> does not involve branch jumps, <code>jmp</code>, which would have a significant performance penalty if the predicted result is not right.</p>
<p>So why does a conditional move perform better?</p>
<p>In a typical <code>x86</code> processor, the execution of an instruction is divided into several stages. Roughly, we have different hardware to deal with different stages. So we do not have to wait for one instruction to finish to start a new one. This is called <strong><a href="//en.wikipedia.org/wiki/Pipeline_(computing)" rel="noreferrer">pipelining</a></strong>.</p>
<p>In a branch case, the following instruction is determined by the preceding one, so we cannot do pipelining. We have to either wait or predict.</p>
<p>In a conditional move case, the execution of conditional move instruction is divided into several stages, but the earlier stages like <code>Fetch</code> and <code>Decode</code> do not depend on the result of the previous instruction; only the latter stages need the result. Thus, we wait a fraction of one instruction's execution time. This is why the conditional move version is slower than the branch when the prediction is easy.</p>
<p>The book <em><a href="https://rads.stackoverflow.com/amzn/click/com/0136108040" rel="noreferrer" rel="nofollow noreferrer">Computer Systems: A Programmer's Perspective, second edition</a></em> explains this in detail. You can check Section 3.6.6 for <em>Conditional Move Instructions</em>, entire Chapter 4 for <em>Processor Architecture</em>, and Section 5.11.2 for special treatment for <em>Branch Prediction and Misprediction Penalties</em>.</p>
<p>Sometimes, some modern compilers can optimize our code to assembly with better performance, and sometimes some compilers can't (the code in question is using Visual Studio's native compiler). Knowing the performance difference between a branch and a conditional move when unpredictable can help us write code with better performance when the scenario gets so complex that the compiler can not optimize them automatically.</p>
</div><p class="this-has-helped">This answer has helped 2585 people.</p><div class="s-prose js-post-body"><p>If you are curious about even more optimizations that can be done to this code, consider this:</p>

<p>Starting with the original loop:</p>

<pre><code>for (unsigned i = 0; i &lt; 100000; ++i)
{
    for (unsigned j = 0; j &lt; arraySize; ++j)
    {
        if (data[j] &gt;= 128)
            sum += data[j];
    }
}
</code></pre>

<p>With loop interchange, we can safely change this loop to:</p>

<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)
{
    for (unsigned i = 0; i &lt; 100000; ++i)
    {
        if (data[j] &gt;= 128)
            sum += data[j];
    }
}
</code></pre>

<p>Then, you can see that the <code>if</code> conditional is constant throughout the execution of the <code>i</code> loop, so you can hoist the <code>if</code> out:</p>

<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)
{
    if (data[j] &gt;= 128)
    {
        for (unsigned i = 0; i &lt; 100000; ++i)
        {
            sum += data[j];
        }
    }
}
</code></pre>

<p>Then, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (<code>/fp:fast</code> is thrown, for example)</p>

<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)
{
    if (data[j] &gt;= 128)
    {
        sum += data[j] * 100000;
    }
}
</code></pre>

<p>That one is 100,000 times faster than before.</p>
</div><p class="this-has-helped">This answer has helped 2132 people.</p><div class="s-prose js-post-body"><p>No doubt some of us would be interested in ways of identifying code that is problematic for the CPU's branch-predictor. The Valgrind tool <code>cachegrind</code> has a branch-predictor simulator, enabled by using the <code>--branch-sim=yes</code> flag. Running it over the examples in this question, with the number of outer loops reduced to 10000 and compiled with <code>g++</code>, gives these results:</p>

<p><strong>Sorted:</strong></p>

<pre><code>==32551== Branches:        656,645,130  (  656,609,208 cond +    35,922 ind)
==32551== Mispredicts:         169,556  (      169,095 cond +       461 ind)
==32551== Mispred rate:            0.0% (          0.0%     +       1.2%   )
</code></pre>

<p><strong>Unsorted:</strong></p>

<pre><code>==32555== Branches:        655,996,082  (  655,960,160 cond +  35,922 ind)
==32555== Mispredicts:     164,073,152  (  164,072,692 cond +     460 ind)
==32555== Mispred rate:           25.0% (         25.0%     +     1.2%   )
</code></pre>

<p>Drilling down into the line-by-line output produced by <code>cg_annotate</code> we see for the loop in question:</p>

<p><strong>Sorted:</strong></p>

<pre><code>          Bc    Bcm Bi Bim
      10,001      4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)
           .      .  .   .      {
           .      .  .   .          // primary loop
 327,690,000 10,016  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)
           .      .  .   .          {
 327,680,000 10,006  0   0              if (data[c] &gt;= 128)
           0      0  0   0                  sum += data[c];
           .      .  .   .          }
           .      .  .   .      }
</code></pre>

<p><strong>Unsorted:</strong></p>

<pre><code>          Bc         Bcm Bi Bim
      10,001           4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)
           .           .  .   .      {
           .           .  .   .          // primary loop
 327,690,000      10,038  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)
           .           .  .   .          {
 327,680,000 164,050,007  0   0              if (data[c] &gt;= 128)
           0           0  0   0                  sum += data[c];
           .           .  .   .          }
           .           .  .   .      }
</code></pre>

<p>This lets you easily identify the problematic line - in the unsorted version the <code>if (data[c] &gt;= 128)</code> line is causing 164,050,007 mispredicted conditional branches (<code>Bcm</code>) under cachegrind's branch-predictor model, whereas it's only causing 10,006 in the sorted version.</p>

<hr>

<p>Alternatively, on Linux you can use the performance counters subsystem to accomplish the same task, but with native performance using CPU counters.</p>

<pre><code>perf stat ./sumtest_sorted
</code></pre>

<p><strong>Sorted:</strong></p>

<pre><code> Performance counter stats for './sumtest_sorted':

  11808.095776 task-clock                #    0.998 CPUs utilized          
         1,062 context-switches          #    0.090 K/sec                  
            14 CPU-migrations            #    0.001 K/sec                  
           337 page-faults               #    0.029 K/sec                  
26,487,882,764 cycles                    #    2.243 GHz                    
41,025,654,322 instructions              #    1.55  insns per cycle        
 6,558,871,379 branches                  #  555.455 M/sec                  
       567,204 branch-misses             #    0.01% of all branches        

  11.827228330 seconds time elapsed
</code></pre>

<p><strong>Unsorted:</strong></p>

<pre><code> Performance counter stats for './sumtest_unsorted':

  28877.954344 task-clock                #    0.998 CPUs utilized          
         2,584 context-switches          #    0.089 K/sec                  
            18 CPU-migrations            #    0.001 K/sec                  
           335 page-faults               #    0.012 K/sec                  
65,076,127,595 cycles                    #    2.253 GHz                    
41,032,528,741 instructions              #    0.63  insns per cycle        
 6,560,579,013 branches                  #  227.183 M/sec                  
 1,646,394,749 branch-misses             #   25.10% of all branches        

  28.935500947 seconds time elapsed
</code></pre>

<p>It can also do source code annotation with dissassembly.</p>

<pre><code>perf record -e branch-misses ./sumtest_unsorted
perf annotate -d sumtest_unsorted
</code></pre>



<pre><code> Percent |      Source code &amp; Disassembly of sumtest_unsorted
------------------------------------------------
...
         :                      sum += data[c];
    0.00 :        400a1a:       mov    -0x14(%rbp),%eax
   39.97 :        400a1d:       mov    %eax,%eax
    5.31 :        400a1f:       mov    -0x20040(%rbp,%rax,4),%eax
    4.60 :        400a26:       cltq   
    0.00 :        400a28:       add    %rax,-0x30(%rbp)
...
</code></pre>

<p>See <a href="https://perf.wiki.kernel.org/index.php/Tutorial" rel="noreferrer">the performance tutorial</a> for more details.</p>
</div></body></html>
<!DOCTYPE html><html lang="en"><head><style>@import url("https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200;1,200;1,300&family=Work+Sans:wght@400;500&display=swap");</style><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta http-equiv="X-UA-Compatible" content="ie=edge"><head><link href="../../src/css/general.css" rel="stylesheet" /></head><p class='question-hyperlink'>Why is processing a sorted array faster than processing an unsorted array?</p><div class="s-prose js-post-body"><p>Here is a piece of C++ code that shows some very peculiar behavior.</p>
<p>For some reason, sorting the data (<em>before</em> the timed region) miraculously makes the primary loop almost six times faster:</p>
<pre class="lang-cpp prettyprint-override"><code>#include &lt;algorithm&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;

int main()
{
    // Generate data
    const unsigned arraySize = 32768;
    int data[arraySize];

    for (unsigned c = 0; c &lt; arraySize; ++c)
        data[c] = std::rand() % 256;

    // !!! With this, the next loop runs faster.
    std::sort(data, data + arraySize);

    // Test
    clock_t start = clock();
    long long sum = 0;
    for (unsigned i = 0; i &lt; 100000; ++i)
    {
        for (unsigned c = 0; c &lt; arraySize; ++c)
        {   // Primary loop.
            if (data[c] &gt;= 128)
                sum += data[c];
        }
    }

    double elapsedTime = static_cast&lt;double&gt;(clock()-start) / CLOCKS_PER_SEC;

    std::cout &lt;&lt; elapsedTime &lt;&lt; '\n';
    std::cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; '\n';
}
</code></pre>
<ul>
<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in 11.54 seconds.</li>
<li>With the sorted data, the code runs in 1.93 seconds.</li>
</ul>
<p>(Sorting itself takes more time than this one pass over the array, so it's not actually worth doing if we needed to calculate this for an unknown array.)</p>
<hr />
<p>Initially, I thought this might be just a language or compiler anomaly, so I tried Java:</p>
<pre class="lang-java prettyprint-override"><code>import java.util.Arrays;
import java.util.Random;

public class Main
{
    public static void main(String[] args)
    {
        // Generate data
        int arraySize = 32768;
        int data[] = new int[arraySize];

        Random rnd = new Random(0);
        for (int c = 0; c &lt; arraySize; ++c)
            data[c] = rnd.nextInt() % 256;

        // !!! With this, the next loop runs faster
        Arrays.sort(data);

        // Test
        long start = System.nanoTime();
        long sum = 0;
        for (int i = 0; i &lt; 100000; ++i)
        {
            for (int c = 0; c &lt; arraySize; ++c)
            {   // Primary loop.
                if (data[c] &gt;= 128)
                    sum += data[c];
            }
        }

        System.out.println((System.nanoTime() - start) / 1000000000.0);
        System.out.println(&quot;sum = &quot; + sum);
    }
}
</code></pre>
<p>With a similar but less extreme result.</p>
<hr />
<p>My first thought was that sorting brings the data into the <a href="https://en.wikipedia.org/wiki/CPU_cache" rel="noreferrer">cache</a>, but that's silly because the array was just generated.</p>
<ul>
<li>What is going on?</li>
<li>Why is processing a sorted array faster than processing an unsorted array?</li>
</ul>
<p>The code is summing up some independent terms, so the order should not matter.</p>
<hr />
<p><strong>Related / follow-up Q&amp;As</strong> about the same effect with different/later compilers and options:</p>
<ul>
<li><a href="https://stackoverflow.com/q/66521344">Why is processing an unsorted array the same speed as processing a sorted array with modern x86-64 clang?</a></li>
<li><a href="https://stackoverflow.com/q/28875325">gcc optimization flag -O3 makes code slower than -O2</a></li>
</ul>
</div><p class="this-has-helped">This answer has helped 34561 people.</p><div class="s-prose js-post-body"><p><strong>You are a victim of <a href="https://en.wikipedia.org/wiki/Branch_predictor" rel="noreferrer">branch prediction</a> fail.</strong></p>
<hr />
<h2>What is Branch Prediction?</h2>
<p>Consider a railroad junction:</p>
<p><a href="https://commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG" rel="noreferrer"><img src="https://i.stack.imgur.com/muxnt.jpg" alt="Image showing a railroad junction" /></a>
<sub><a href="https://commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG" rel="noreferrer">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en" rel="noreferrer">CC-By-SA 3.0</a> license.</sub></p>
<p>Now for the sake of argument, suppose this is back in the 1800s - before long-distance or radio communication.</p>
<p>You are a blind operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.</p>
<p><em>Trains are heavy and have a lot of inertia, so they take forever to start up and slow down.</em></p>
<p>Is there a better way? You guess which direction the train will go!</p>
<ul>
<li>If you guessed right, it continues on.</li>
<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>
</ul>
<p><strong>If you guess right every time</strong>, the train will never have to stop.<br />
<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>
<hr />
<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>
<p><img src="https://i.stack.imgur.com/pyfwC.png" alt="Screenshot of compiled code containing an if statement" /></p>
<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>
<p><em>Modern processors are complicated and have long pipelines. This means they take forever to &quot;warm up&quot; and &quot;slow down&quot;.</em></p>
<p>Is there a better way? You guess which direction the branch will go!</p>
<ul>
<li>If you guessed right, you continue executing.</li>
<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>
</ul>
<p><strong>If you guess right every time</strong>, the execution will never have to stop.<br />
<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>
<hr />
<p>This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.</p>
<p>How would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every three times, you guess the same...</p>
<p><em><strong>In other words, you try to identify a pattern and follow it.</strong></em> This is more or less how branch predictors work.</p>
<p>Most applications have well-behaved branches. Therefore, modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>
<p>Further reading: <a href="https://en.wikipedia.org/wiki/Branch_predictor" rel="noreferrer">&quot;Branch predictor&quot; article on Wikipedia</a>.</p>
<hr />
<h2>As hinted from above, the culprit is this if-statement:</h2>
<pre><code>if (data[c] &gt;= 128)
    sum += data[c];
</code></pre>
<p>Notice that the data is evenly distributed between 0 and 255. When the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>
<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times. Even a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>
<p><strong>Quick visualization:</strong></p>
<pre class="lang-none prettyprint-override"><code>T = branch taken
N = branch not taken

data[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...
branch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...

       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)
</code></pre>
<p>However, when the data is completely random, the branch predictor is rendered useless, because it can't predict random data. Thus there will probably be around 50% misprediction (no better than random guessing).</p>
<pre class="lang-none prettyprint-override"><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, ...
branch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T  ...

       = TTNTTTTNTNNTTT ...   (completely random - impossible to predict)
</code></pre>
<hr />
<p><strong>What can be done?</strong></p>
<p>If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>
<p>Replace:</p>
<pre><code>if (data[c] &gt;= 128)
    sum += data[c];
</code></pre>
<p>with:</p>
<pre><code>int t = (data[c] - 128) &gt;&gt; 31;
sum += ~t &amp; data[c];
</code></pre>
<p>This eliminates the branch and replaces it with some bitwise operations.</p>
<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of <code>data[]</code>.)</sub></p>
<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>
<p>C++ - Visual Studio 2010 - x64 Release</p>
<div class="s-table-container">
<table class="s-table">
<thead>
<tr>
<th>Scenario</th>
<th>Time (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Branching - Random data</td>
<td>11.777</td>
</tr>
<tr>
<td>Branching - Sorted data</td>
<td>2.352</td>
</tr>
<tr>
<td>Branchless - Random data</td>
<td>2.564</td>
</tr>
<tr>
<td>Branchless - Sorted data</td>
<td>2.587</td>
</tr>
</tbody>
</table>
</div>
<p>Java - NetBeans 7.1.1 JDK 7 - x64</p>
<div class="s-table-container">
<table class="s-table">
<thead>
<tr>
<th>Scenario</th>
<th>Time (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Branching - Random data</td>
<td>10.93293813</td>
</tr>
<tr>
<td>Branching - Sorted data</td>
<td>5.643797077</td>
</tr>
<tr>
<td>Branchless - Random data</td>
<td>3.113581453</td>
</tr>
<tr>
<td>Branchless - Sorted data</td>
<td>3.186068823</td>
</tr>
</tbody>
</table>
</div>
<p>Observations:</p>
<ul>
<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>
<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>
<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>
</ul>
<p>A general rule of thumb is to avoid data-dependent branching in critical loops (such as in this example).</p>
<hr />
<p><strong>Update:</strong></p>
<ul>
<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move, so there is no difference between the sorted and unsorted data - both are fast.</p>
<p>(Or somewhat fast: for the already-sorted case, <code>cmov</code> can be slower especially if GCC puts it on the critical path instead of just <code>add</code>, especially on Intel before Broadwell where <code>cmov</code> has 2 cycle latency: <a href="https://stackoverflow.com/questions/28875325/gcc-optimization-flag-o3-makes-code-slower-than-o2">gcc optimization flag -O3 makes code slower than -O2</a>)</p>
</li>
<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Intel_C++_Compiler" rel="noreferrer">Intel C++ Compiler</a> (ICC) 11 does something miraculous. It <a href="https://en.wikipedia.org/wiki/Loop_interchange" rel="noreferrer">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. Not only is it immune to the mispredictions, it's also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p>
</li>
<li><p>If you give the Intel compiler the branchless code, it just outright vectorizes it... and is just as fast as with the branch (with the loop interchange).</p>
</li>
</ul>
<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>
</div><p class="this-has-helped">This answer has helped 4599 people.</p><div class="s-prose js-post-body"><p><strong>Branch prediction.</strong></p>
<p>With a sorted array, the condition <code>data[c] &gt;= 128</code> is first <code>false</code> for a streak of values, then becomes <code>true</code> for all later values. That's easy to predict. With an unsorted array, you pay for the branching cost.</p>
</div><p class="this-has-helped">This answer has helped 3750 people.</p><div class="s-prose js-post-body"><p>The reason why performance improves drastically when the data is sorted is that the branch prediction penalty is removed, as explained beautifully in <a href="//stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array/11227902#11227902">Mysticial's answer</a>.</p>
<p>Now, if we look at the code</p>
<pre><code>if (data[c] &gt;= 128)
    sum += data[c];
</code></pre>
<p>we can find that the meaning of this particular <code>if... else...</code> branch is to add something when a condition is satisfied. This type of branch can be easily transformed into a <strong>conditional move</strong> statement, which would be compiled into a conditional move instruction: <code>cmovl</code>, in an <code>x86</code> system. The branch and thus the potential branch prediction penalty is removed.</p>
<p>In <code>C</code>, thus <code>C++</code>, the statement, which would compile directly (without any optimization) into the conditional move instruction in <code>x86</code>, is the ternary operator <code>... ? ... : ...</code>. So we rewrite the above statement into an equivalent one:</p>
<pre><code>sum += data[c] &gt;=128 ? data[c] : 0;
</code></pre>
<p>While maintaining readability, we can check the speedup factor.</p>
<p>On an Intel <a href="//en.wikipedia.org/wiki/Intel_Core#Core_i7" rel="noreferrer">Core i7</a>-2600K @ 3.4 GHz and Visual Studio 2010 Release Mode, the benchmark is:</p>
<p><strong>x86</strong></p>
<div class="s-table-container">
<table class="s-table">
<thead>
<tr>
<th>Scenario</th>
<th>Time (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Branching - Random data</td>
<td>8.885</td>
</tr>
<tr>
<td>Branching - Sorted data</td>
<td>1.528</td>
</tr>
<tr>
<td>Branchless - Random data</td>
<td>3.716</td>
</tr>
<tr>
<td>Branchless - Sorted data</td>
<td>3.71</td>
</tr>
</tbody>
</table>
</div>
<p><strong>x64</strong></p>
<div class="s-table-container">
<table class="s-table">
<thead>
<tr>
<th>Scenario</th>
<th>Time (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Branching - Random data</td>
<td>11.302</td>
</tr>
<tr>
<td>Branching - Sorted data</td>
<td>1.830</td>
</tr>
<tr>
<td>Branchless - Random data</td>
<td>2.736</td>
</tr>
<tr>
<td>Branchless - Sorted data</td>
<td>2.737</td>
</tr>
</tbody>
</table>
</div>
<p>The result is robust in multiple tests. We get a great speedup when the branch result is unpredictable, but we suffer a little bit when it is predictable. In fact, when using a conditional move, the performance is the same regardless of the data pattern.</p>
<p>Now let's look more closely by investigating the <code>x86</code> assembly they generate. For simplicity, we use two functions <code>max1</code> and <code>max2</code>.</p>
<p><code>max1</code> uses the conditional branch <code>if... else ...</code>:</p>
<pre><code>int max1(int a, int b) {
    if (a &gt; b)
        return a;
    else
        return b;
}
</code></pre>
<p><code>max2</code> uses the ternary operator <code>... ? ... : ...</code>:</p>
<pre><code>int max2(int a, int b) {
    return a &gt; b ? a : b;
}
</code></pre>
<p>On an x86-64 machine, <code>GCC -S</code> generates the assembly below.</p>
<pre><code>:max1
    movl    %edi, -4(%rbp)
    movl    %esi, -8(%rbp)
    movl    -4(%rbp), %eax
    cmpl    -8(%rbp), %eax
    jle     .L2
    movl    -4(%rbp), %eax
    movl    %eax, -12(%rbp)
    jmp     .L4
.L2:
    movl    -8(%rbp), %eax
    movl    %eax, -12(%rbp)
.L4:
    movl    -12(%rbp), %eax
    leave
    ret

:max2
    movl    %edi, -4(%rbp)
    movl    %esi, -8(%rbp)
    movl    -4(%rbp), %eax
    cmpl    %eax, -8(%rbp)
    cmovge  -8(%rbp), %eax
    leave
    ret
</code></pre>
<p><code>max2</code> uses much less code due to the usage of instruction <code>cmovge</code>. But the real gain is that <code>max2</code> does not involve branch jumps, <code>jmp</code>, which would have a significant performance penalty if the predicted result is not right.</p>
<p>So why does a conditional move perform better?</p>
<p>In a typical <code>x86</code> processor, the execution of an instruction is divided into several stages. Roughly, we have different hardware to deal with different stages. So we do not have to wait for one instruction to finish to start a new one. This is called <strong><a href="//en.wikipedia.org/wiki/Pipeline_(computing)" rel="noreferrer">pipelining</a></strong>.</p>
<p>In a branch case, the following instruction is determined by the preceding one, so we cannot do pipelining. We have to either wait or predict.</p>
<p>In a conditional move case, the execution of conditional move instruction is divided into several stages, but the earlier stages like <code>Fetch</code> and <code>Decode</code> do not depend on the result of the previous instruction; only the latter stages need the result. Thus, we wait a fraction of one instruction's execution time. This is why the conditional move version is slower than the branch when the prediction is easy.</p>
<p>The book <em><a href="https://rads.stackoverflow.com/amzn/click/com/0136108040" rel="noreferrer" rel="nofollow noreferrer">Computer Systems: A Programmer's Perspective, second edition</a></em> explains this in detail. You can check Section 3.6.6 for <em>Conditional Move Instructions</em>, entire Chapter 4 for <em>Processor Architecture</em>, and Section 5.11.2 for special treatment for <em>Branch Prediction and Misprediction Penalties</em>.</p>
<p>Sometimes, some modern compilers can optimize our code to assembly with better performance, and sometimes some compilers can't (the code in question is using Visual Studio's native compiler). Knowing the performance difference between a branch and a conditional move when unpredictable can help us write code with better performance when the scenario gets so complex that the compiler can not optimize them automatically.</p>
</div><p class="this-has-helped">This answer has helped 2585 people.</p><div class="s-prose js-post-body"><p>If you are curious about even more optimizations that can be done to this code, consider this:</p>

<p>Starting with the original loop:</p>

<pre><code>for (unsigned i = 0; i &lt; 100000; ++i)
{
    for (unsigned j = 0; j &lt; arraySize; ++j)
    {
        if (data[j] &gt;= 128)
            sum += data[j];
    }
}
</code></pre>

<p>With loop interchange, we can safely change this loop to:</p>

<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)
{
    for (unsigned i = 0; i &lt; 100000; ++i)
    {
        if (data[j] &gt;= 128)
            sum += data[j];
    }
}
</code></pre>

<p>Then, you can see that the <code>if</code> conditional is constant throughout the execution of the <code>i</code> loop, so you can hoist the <code>if</code> out:</p>

<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)
{
    if (data[j] &gt;= 128)
    {
        for (unsigned i = 0; i &lt; 100000; ++i)
        {
            sum += data[j];
        }
    }
}
</code></pre>

<p>Then, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (<code>/fp:fast</code> is thrown, for example)</p>

<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)
{
    if (data[j] &gt;= 128)
    {
        sum += data[j] * 100000;
    }
}
</code></pre>

<p>That one is 100,000 times faster than before.</p>
</div><p class="this-has-helped">This answer has helped 2132 people.</p><div class="s-prose js-post-body"><p>No doubt some of us would be interested in ways of identifying code that is problematic for the CPU's branch-predictor. The Valgrind tool <code>cachegrind</code> has a branch-predictor simulator, enabled by using the <code>--branch-sim=yes</code> flag. Running it over the examples in this question, with the number of outer loops reduced to 10000 and compiled with <code>g++</code>, gives these results:</p>

<p><strong>Sorted:</strong></p>

<pre><code>==32551== Branches:        656,645,130  (  656,609,208 cond +    35,922 ind)
==32551== Mispredicts:         169,556  (      169,095 cond +       461 ind)
==32551== Mispred rate:            0.0% (          0.0%     +       1.2%   )
</code></pre>

<p><strong>Unsorted:</strong></p>

<pre><code>==32555== Branches:        655,996,082  (  655,960,160 cond +  35,922 ind)
==32555== Mispredicts:     164,073,152  (  164,072,692 cond +     460 ind)
==32555== Mispred rate:           25.0% (         25.0%     +     1.2%   )
</code></pre>

<p>Drilling down into the line-by-line output produced by <code>cg_annotate</code> we see for the loop in question:</p>

<p><strong>Sorted:</strong></p>

<pre><code>          Bc    Bcm Bi Bim
      10,001      4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)
           .      .  .   .      {
           .      .  .   .          // primary loop
 327,690,000 10,016  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)
           .      .  .   .          {
 327,680,000 10,006  0   0              if (data[c] &gt;= 128)
           0      0  0   0                  sum += data[c];
           .      .  .   .          }
           .      .  .   .      }
</code></pre>

<p><strong>Unsorted:</strong></p>

<pre><code>          Bc         Bcm Bi Bim
      10,001           4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)
           .           .  .   .      {
           .           .  .   .          // primary loop
 327,690,000      10,038  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)
           .           .  .   .          {
 327,680,000 164,050,007  0   0              if (data[c] &gt;= 128)
           0           0  0   0                  sum += data[c];
           .           .  .   .          }
           .           .  .   .      }
</code></pre>

<p>This lets you easily identify the problematic line - in the unsorted version the <code>if (data[c] &gt;= 128)</code> line is causing 164,050,007 mispredicted conditional branches (<code>Bcm</code>) under cachegrind's branch-predictor model, whereas it's only causing 10,006 in the sorted version.</p>

<hr>

<p>Alternatively, on Linux you can use the performance counters subsystem to accomplish the same task, but with native performance using CPU counters.</p>

<pre><code>perf stat ./sumtest_sorted
</code></pre>

<p><strong>Sorted:</strong></p>

<pre><code> Performance counter stats for './sumtest_sorted':

  11808.095776 task-clock                #    0.998 CPUs utilized          
         1,062 context-switches          #    0.090 K/sec                  
            14 CPU-migrations            #    0.001 K/sec                  
           337 page-faults               #    0.029 K/sec                  
26,487,882,764 cycles                    #    2.243 GHz                    
41,025,654,322 instructions              #    1.55  insns per cycle        
 6,558,871,379 branches                  #  555.455 M/sec                  
       567,204 branch-misses             #    0.01% of all branches        

  11.827228330 seconds time elapsed
</code></pre>

<p><strong>Unsorted:</strong></p>

<pre><code> Performance counter stats for './sumtest_unsorted':

  28877.954344 task-clock                #    0.998 CPUs utilized          
         2,584 context-switches          #    0.089 K/sec                  
            18 CPU-migrations            #    0.001 K/sec                  
           335 page-faults               #    0.012 K/sec                  
65,076,127,595 cycles                    #    2.253 GHz                    
41,032,528,741 instructions              #    0.63  insns per cycle        
 6,560,579,013 branches                  #  227.183 M/sec                  
 1,646,394,749 branch-misses             #   25.10% of all branches        

  28.935500947 seconds time elapsed
</code></pre>

<p>It can also do source code annotation with dissassembly.</p>

<pre><code>perf record -e branch-misses ./sumtest_unsorted
perf annotate -d sumtest_unsorted
</code></pre>



<pre><code> Percent |      Source code &amp; Disassembly of sumtest_unsorted
------------------------------------------------
...
         :                      sum += data[c];
    0.00 :        400a1a:       mov    -0x14(%rbp),%eax
   39.97 :        400a1d:       mov    %eax,%eax
    5.31 :        400a1f:       mov    -0x20040(%rbp,%rax,4),%eax
    4.60 :        400a26:       cltq   
    0.00 :        400a28:       add    %rax,-0x30(%rbp)
...
</code></pre>

<p>See <a href="https://perf.wiki.kernel.org/index.php/Tutorial" rel="noreferrer">the performance tutorial</a> for more details.</p>
</div></body></html>
